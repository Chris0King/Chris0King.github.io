<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[Vim 马克]]></title>
      <url>/techstack/vim-mark</url>
      <content type="text"><![CDATA[待更新。]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Git 马克]]></title>
      <url>/techstack/git-mark</url>
      <content type="text"><![CDATA[自从 Github 官方的客户端崩了几次之后，决定彻底卸载，改用 Git 命令的方式进行项目更新。用着用着发现，Git 还有好多没搞明白的东西，这里统一做一个记录。0  关于 Git这里记录的东西来自官方的 PDF 与一些帖子。这里有一些基本概念和操作，上图很明确的解释了。  工作区 workspace：项目文件夹，即时性强，对文件的所有更改都会立刻体现在这里  版本库 .git：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本数据库  暂存区 index/stage：git add以后，当前对文件的更改会保存到这个区  本地仓库 local repository：git commit 以后，当前暂存区里对文件的更改会提交到本地仓库；git pull 之后远程仓库领先的 commit 会同步到本地仓库  远程仓库 remote repository：远程仓库名一般叫 origin，git push以后，本地仓库里领先于远程仓库的 commit 会同步到远程仓库1  git config 设置1.1  常用配置.gitconfig 文件在 C:\Users\$USER 目录下，储存一些 Git 的参数属性，需要 Admin 权限进行更改。设置隐藏属性不影响权限。# show all configgit config --global -l# user profilegit config --global user.name "Tommy"git config --global user.email tommy.zhou@sap.com# editor Codegit config --global core.editor vim1.2  设置 alias设置 editor 这里，如果需要设置 VSCode，把安装路径添加到 PATH，使用 Code 作为键值就可，其他的编辑器也是类似的。另外Git 可以设置快捷指令。# aliasgit config --global alias.co checkoutgit config --global alias.br branchgit config --global alias.ad addgit config --global alias.ci commitgit config --global alias.ps pushgit config --global alias.pl pullgit config --global alias.st statusgit config --global alias.lo loggit config --global alias.unstage 'reset HEAD --'2  repository 操作2.1  初始化与状态查询对一个进行版本管理的工具，常用操作在这里。显示本地与远程项目的交互，然后单独记录一下 branch 相关的一些配置。# initialize a repogit init# clone from reomotegit clone &lt;url&gt; &lt;localname&gt;# check changing statusgit statusgit status -s-s 参数可以用更简洁的形式进行显示。注意，这将显示左右两栏，左侧是 local repository 的状态，右侧是工作区的状态。A 代表添加，M 代表有修改。2.2  文件提交与忽略检查文件状态的时候，git 不会检查未被跟踪的文件，比如刚刚建立的新文件。这个时候需要将文件加入到索引区，进行跟踪。在 git init 之后往往也需要进行一次 add 操作。# add new files to trackgit add &lt;filename&gt;在 add 的时候需要忽略一些不必要的文件，因此会有 .gitignore 文件。参考# vim .gitignore to editcat .gitignore# ignore all .a files*.a# but do track lib.a, even though you're ignoring .a files above !lib.a# only ignore the TODO file in the current directory, not subdir/TODO /TODO# ignore all files in any directory named buildbuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directory and any of its subdirectoriesdoc/**/*.pdf2.3  更改内容对比可以查看工作区、本地仓库里面文件的更新对比。这将会打开默认的 editor。可以用外接工具打开和查看这些对比。# check the diff of workspacegit diff# check the diff of local repogit diff --staged# using external toolgit difftool --too=&lt;tool&gt;2.4  提交更新的内容commit 提交文件的更新内容之后，需要附加一条 message 来进行标注。可以在 commit 弹出的默认编辑器中进行，也可以直接在指令中 -m 附加 message 的内容。# commitgit commit# append the messagegit commit -m "Message Content"# automatically addgit commit -a -m "Message Content"注意这里提交的内容仅从 index/stage 到 local repository，没有 add 的文件不会进行提交。当然也可以使用 -a 来自动添加，但这只能添加所有开始跟踪的文件。2.5  删除文件删除文件的流程应该是，同时删除工作区和缓存区的文件，再进行 commit。rm 指令仅移除工作区文件，git rm 指令可以移除工作区与缓存区的文件。使用 –cache 则可以仅移除缓存区文件，这一般用于移除不小心提交但实际需要忽略的文件。# remove files in workspacerm &lt;filename&gt;# remove files in both workspace and stagegit rm &lt;filename&gt;git rm -r .# remove files in stagegit rm &lt;filename&gt; --cache2.6  移动文件Git 并不记录文件的移动，mv 指令等价于 rm 与 add 指令的组合。2.7  查看文件更改历史git log 指令可以查看 commit 历史，这部分可选参数比较多，查看文档。# check commit historygit loggit log -p2.8  撤销操作几乎所有的操作都是可以撤销的。如果在 commit 之后发现有忘记 add 的文件，可以这样将文件添加进来，保持仅一次的 commit。使用 git reset 来取消文件的缓存，git checkout 来撤销文件的更改，分别撤销缓存区与工作区的更改。# add forgotten files to last commitgit commit -m 'initial commit'git add forgotten_filegit commit --amend# unstage filesgit reset HEAD &lt;filename&gt;# revert modified filesgit checkout -- &lt;filename&gt;2.9  与远程仓库交互本地操作好了就可以与远端仓库交互了。shortname 可以在后面的指令中替代跟在后面的 url。remove 的指令常常用于移除一些不再参与的 remote。# shwo remote repogit remotegit remote -v# same as git clonegit remote add &lt;shortname&gt; &lt;url&gt;# get remote to local, requires manually mergegit fetch &lt;remote&gt;# automatically fetch and pullgit pull &lt;remote&gt;# pushing to remotes, default to origin mastergit push &lt;remote&gt; &lt;branch&gt;# inspecting a remotegit remote show &lt;remote&gt;# rename remotegit remote rename &lt;pb&gt; &lt;remote&gt;# removing remotegit remote remove pb3  branch 相关操作branch 的操作很有意思。branch 仅仅是一个可移动的指针，指向某一次的 commit，master 也是一个特殊的指针，默认在 init 的时候创建。创建一个新的 branch时，默认指向当前的 commit。指向指针的指针 HEAD 来指明当前所在的 branch。3.1  分支创建与切换分支创建的时候，默认指向当前最新的 commit。切换分支会改变工作区的文件。创建新的分支的时候会复制当前分支所有的文件和 commit 历史，因此需要 fork 其他人提交历史的时候，可以进行：1 为项目添加别人的 remote；2 git checkout 到所需的分支；3 在这里执行 git checkout -b &lt;name&gt;。# create a new branchgit branch &lt;branchname&gt;# list all branchesgit branchgit branch -agit branch -v# already merged branchgit branch --mergedgit branch --no-merged# switching branchesgit checkout &lt;branchname&gt;git checkout -b &lt;branchname&gt;3.2  分支合并切换到合并的分支，merge 被合并的分支，之后可以删除被合并的分支。# merge branchesgit checkout mastergit merge &lt;branchname&gt;# delete branchgit branch -d &lt;branch&gt;# delete remote branchgit push origin --delete &lt;branchname&gt;如果合并的时候遇到了分支之间的冲突，那么 git 会提示冲突的存在，需要手动解决，但是此时已经创建了一个 merge commit，再用 status 查看存在冲突的 path。另外 git 还会在冲突的文件加入 standard conflict-resolution markers，标记冲突。# merge conflictgit merge iss53Auto-merging index.htmlCONFLICT (content): Merge conflict in index.htmlAutomatic merge failed; fix conflicts and then commit the result.# check status nowgit statusOn branch masterYou have unmerged paths.(fix conflicts and run "git commit")Unmerged paths:(use "git add &lt;file&gt;..." to mark resolution)    both modified:      index.html no changes added to commit (use "git add" and/or "git commit -a")# standard conflict-resolution markers&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;=======&lt;div id="footer"&gt;	please contact us at support@github.com&lt;/div&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html# external toolgit mergetool解决冲突需要移除冲突标记，将整块的内容替换为选择的那个分支的这部分的内容。后面还有许多高端的操作，一般也用不上，先记录这么多了，有需要的时候再查阅官方文档。]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[CMD 马克]]></title>
      <url>/techstack/cmd-mark</url>
      <content type="text"><![CDATA[记录 Win 下面使用 CMD 的一些技巧。CMD 相比于 Powershell，所能做的事情更少，但日常使用足够，而且打开速度远超过 PS，一般使用 CMD 即可。0  基础使用第三方的命令行比较舒适，推荐基于 UWP 设计的 Fluent Terminal。字体设置为 Fira Code，火狐家族衍生字体。字号14即可。配色使用 sspai 之前提到的 iTerm 主题中的 brightness。可以给 PS 安装一个 Power-line 的插件进行美化。基础的知识点：  CMD 默认显示的当前所在完整路径，因此每条命令行前面都有很长的前缀。  Powershell 会在路径的前面额外显示 PS 标识。  基本的指令与 Linux 不太一样，但一般有类似的指令。  没有 sudo 指令，但 CMD 第三方终端默认是有 Admin 权限的。1  DOS常用命令：ipconfig：查询本机IP地址ping ip：本机IP是否能与目标计通信， –t 持续 pingtasklist：查找所有进程名称、PID和其占用的内存mkdir/md dirname：在指定目录下创建目录rmdir dirname：删除指定目录； rmdir /s +目录 删除指定目录下所有内容echo filename name.type：创建一个有内容的文件move ori path des path：移动文件至目标路径下copy  ori path des path：复制文件至目标路径下set var：显示本机所有的环境变量dir：查看所有目录where：查看可执行命令位置find：查找可执行命令findstr：查找字符串cd：输入后按 Tab 可以遍历当前所有文件夹路径2  包管理器 Scoop超级厉害的包管理器，虽然整个体系没有 brew 完善，但由于可以自定义 bucket，整体的灵活性更高。能用 Scoop 安装的应用，就用 Scoop 安装。官网：scoop.sh基本的使用参考自带的说明，常用的除了 install，uninstall 还有一个 status 查看更新状态。主要是添加 bucket，添加之后就可以安装很多应用了，连 Jetbrains 家的东西都可以装。安装旧版本的应用比如 Python27 时，在 versions 里面搜一下可以搜到旧版本的命名。有一个全局与用户的区别，其实使用用户域就可以，指令更加简洁，brew 也是这样。安装时候具体下载速度取决于各个软件源地址，没有统一的，有时候开小飞机会好一点点。Scoop 有时候会先自己更新一下，主要是更新各个 bucket。3  环境管理用 nvm 装 nodejs，然后使用 cnpm。pip3 一定要带版本号3使用，一定要带 –user 使用。pip 会报编码错误，在 PS 下执行 pip。scoop reset python 切换3版本。]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[WWDC19 随录]]></title>
      <url>/life/wwdc-19</url>
      <content type="text"><![CDATA[19 年的 WWDC 随录。第15周，项目压身，项目真多。先从Apple TV讲起，支持多人模式了。啥？支持了XBox与PS平台了？岂不是以后可以买来打游戏。库克爷爷的破音有点多啊。然后就是Apple Watch。新的系统与新的体验？来看看。首先是表盘设计，新增了许多的标表盘设计。开放了很多的新的借接口，现在有独立的App Store了。新的健康跟踪功能，女性周期跟踪。新的表带与设计。iOS来了。库克爷爷今年有点激动啊，直接开门见山，来，我们来说iOS！iOS 12的安装率居然有97%。熟悉的大鼻子大叔又上来了，看看讲什么。当然，名字是叫iOS 13。性能又来了？快了30%的Face ID解锁速度，应用体积减少了60%，应用启动速度2倍。这么厉害的嘛。宣传片！果然有黑暗模式！一群水母飘过。大众叫了几千年的黑暗模式终于来了。反正就是各种App都可以变黑。键盘也是黑色的，并且有新的滑动输入！提醒事项变得智能了。地图采用了苹果自己采集的新的数据集，很充实，不过应该只有美国地区，的确看起来非常的3D啊。然后是一些隐私数据的处理了，地理位置信息监控。用Apple ID登录有点厉害啊，直接隐蔽自己的邮件信息，Apple会自动生成一个随机的邮箱地址进行转发，厉害了。家庭视频监控的视频流会经过加密处理。emoji有了更多的细节，乱七八糟的脸部东西都加上去了，还有AirPods。苹果账户可以设置自己的emoji的头像和昵称了。另外Memoji可以支持自定义的头像表情。相机功能增强，编辑功能增强，可以支持视频的编辑了。Siri的声音变得好听多了，音频系列更新了一堆。哦？要讲iPad了。平台性质的改变，有点厉害了，居然叫iPadOS！多任务方面，直接把iOS的东东整合进来了，像iPhone一样。有点混乱的样子，又像macOS，又像iOS。主要的改变还是多任务处理方面。文件系统终于要更新了。文件应用的界面终于丰富了，可以分享iCloud文件夹，但是居然可以插U盘。Safari也要改版了，支持桌面模式的浏览，有下载支持。字体也可以安装了，直接从Apple Store下载，可以。键盘也有点花样，可以支持手势的复制粘贴撤销，不用要黄了。Apple Pencil也更新了，怎么突然断网了。。标记功能有点强大。刚刚好像会场黑了？为Apple Pencil设计的新的接口很棒。好了，到macOS了。哦不，发布了一个巨丑的机箱，和一个巨好看的显示器。模块化的设计。28核的Xeon。1.5Tb的系统内存是什么概念。各项参数都很厉害就是了。还有轮子，简直就是行李箱系列主机。性能怪兽。这个屏幕也是玩出了花，支架还有6K显示器。macOS来了，Catalina。iTunes终于还是被拆分了。iPad最终还是被当作了一块外置屏幕和画板。新的VoiceControl还是很不错的。macOS现在可以使用iPad平台的应用了，相关的接口已经发布，只需要通过Xcode编译即可。ARKit真的是个好东西。我的世界要AR化了。SwiftUI也发布了，这个功能也太强大了。。多多学习～￼]]></content>
      <categories>
        
          <category> life </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[SSH 马克]]></title>
      <url>/techstack/ssh-mark</url>
      <content type="text"><![CDATA[SSH 使用的一些常用命令。1  连接服务器ssh name@ip然后根据提示输入用户密码，即可连接。2  上传文件scp a.file name@ip:path/to/dir如将终端所在路径下的a.txt文件上传到用户名为ubuntu，ip地址为1.1.1.1的服务器上，并存储在服务器上的~/seven文件夹下：scp a.txt ubuntu@1.1.1.1:~/seven# for wzy:scp /Users/tommy/Downloads/MOVIES.zip root@101.132.164.15:~/../var/www/films如需上传文件夹，则scp后加 -r：scp -r dir ubuntu@1.1.1.1:~/seven删除文件夹：rm -r dir3  下载文件scp name@ip:path/to/dir path/to/local如将IP地址为1.1.1.1用户名为ubuntu的服务器上~/ubuntu文件夹下的3.jpg下载到本地~/seven文件夹：scp ubuntu@1.1.1.1:~/ubuntu/3.jpg ~/seven如需下载文件夹，加-r：scp -r ubuntu@1.1.1.1:~/ubuntu/dir ~/seven4  退出连接exit5 scp 和 ssh 关于端口号的参数的区别大家都晓得。linux区分大小写。windows相反。可是同样的端口号参数。在scp和ssh命令中的使用，却不同。在scp命令中。需要大写。如下# [root@localhost data]scp -P 28 fina_info20120904.zip root@58.213.14.170:/home/huanliu/data在ssh命令中，却是小写。如下# [root@localhost dist]ssh -p 28 58.213.14.170]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Ubuntu 终端马克]]></title>
      <url>/techstack/ubuntu-mark</url>
      <content type="text"><![CDATA[常用的 Ubuntu 指令，在这里记录一下。方便链接远程服务器的时候使用。1  文件操作相关创建文件： touch a.txt创建文件夹： mkdir NewFolder删除文件： rm a.txt删除文件夹： rmdir NewFolder删除带有文件的文件夹： rm -r NewFolder2  常用解压与压缩命令.tar 文件# 仅打包，并非压缩tar -xvf FileName.tar         # 解包tar -cvf FileName.tar DirName # 将DirName和其下所有文件（夹）打包.gz文件# .gzgunzip FileName.gz  # 解压1gzip -d FileName.gz # 解压2gzip FileName       # 压缩，只能压缩文件.tar.gz文件、 .tgz文件# .tar.gz 和 .tgztar -zxvf FileName.tar.gz               # 解压tar -zcvf FileName.tar.gz DirName       # 将DirName和其下所有文件（夹）压缩tar -C DesDirName -zxvf FileName.tar.gz # 解压到目标路径.zip文件# 感觉.zip占用空间比.tar.gz大unzip FileName.zip          # 解压zip FileName.zip DirName    # 将DirName本身压缩zip -r FileName.zip DirName # 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩.rar文件# mac和linux并没有自带rar，需要去下载rar x FileName.rar      # 解压rar a FileName.rar DirName # 压缩]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[macOS 显卡锁定]]></title>
      <url>/macos/gpu-lock</url>
      <content type="text"><![CDATA[MacBook Pro 15寸的独立显卡十分费电，可以使用以下方案进行显卡锁定。1 终端命令sudo pmset -a GPUSwitch 0 | 强制使用核显(集成显卡)sudo pmset -a GPUSwitch 1 | 强制使用独立显卡sudo pmset -a GPUSwitch 2 | 自动切换2 steveschow/gfxCardStatusThis update will default to integrated-only mode (if possible) when launching gfxCardStatus. If there are already apps open creating discrete dependencies, then it will not default to integrated-only mode.]]></content>
      <categories>
        
          <category> macOS </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[QL 插件马克]]></title>
      <url>/techstack/quicklook-plugin</url>
      <content type="text"><![CDATA[macOS 上的 QuickLook 可以安装第三方的插件，查看更多类型的文件、查看文件大小、显示图片的分辨率……QuickLook 是 Leopard(10.5) 引入的一项新特性，允许在 Finder 中快速预览多种不同类型的文件。采用的是可扩展的架构，使得大部分工作都由插件完成。这些插件是后缀为 .qlgenerator的bundle，只要将这些 bundle 文件拖放到 QuickLook 目录：/System/Library/QuickLook 中即可完成插件的安装。1 安装与卸载方法            手动安装      将下载的 .qlgenerator 文件移动至 ~/Library/QuickLook后在终端运行 qlmanage -r              Homebrew Cask 安装      安装命令：brew cask install              卸载      brew cask uninstall      2 常用插件            QLImageSize图像大小      brew cask install qlimagesize              QLVideo预览视频      brew cask install qlvideo              QLMarkdown预览md文件      brew cask install qlmarkdown              QLColorCode代码高亮      brew cask install qlcolorcode              QuickLookJSON预览json文件      brew cask install quicklook-json              QLStephen预览纯文本文件      brew cask install qlstephen      3 其他插件            WebP预览webp图像      brew cask install webpquicklook              Suspicious Package预览pkg文件      brew cask install suspicious-package              PeovisionQL预览ipa文件      brew cask install provisionql              QuickLookAPK预览apk文件      brew cask install quicklookapk      ]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[WWDC18 随录]]></title>
      <url>/life/wwdc-18</url>
      <content type="text"><![CDATA[第二次熬夜看 WWDC，还是在数学建模国赛的当天凌晨，刺激。2018年9月13日，数学建模比赛国赛当天，此刻凌晨1点整。12点整，建模小队准时刷入同济大学研习室预约系统，希望抢到周六，建模比赛第二天的研习室。过程不那么顺利，不过最终还是预约到了周六的研习室。收拾打整，带上各种装备，上床准备观看今年的 WWDC 发布会。1点整。此刻，发布会着实开场。和以往每一年的 WWDC 套路一致，今年的 WWDC 同样是以一只有趣的小短片开场。有趣的是，今年的小短片，主角是一位是带着 AirPods 耳机的运动女孩，手提一只非常重要的公文箱，往 Apple Park 极速奔跑着，一路上遇到了重重险阻，配合碟中谍系列的经典背景音乐，仿佛一场谍战大戏。女主好容易跑进了 Apple Park，和一位高管打了招呼，紧接着又继续跑向 Steve Theater——Cook 正在等着她送来手里这件重要的东西。终于来到了 Cook 面前，打开箱子，里面这件重要的东西，居然是——一只 PPT 的点击笔，哈哈。简单的寒暄，Cook 宣布今晚会议第一项，Apple  Watch。。请来了手表高管。一段视频简单粗暴地揭示了今年 Apple Watch 的外观变化。和之前泄漏的截图一致，今年的手表也迎来了全面屏的主流设计变化，整个表盘较之前的系列又了35%的面积提升，整体的视觉效果还是非常不错的。表盘的信息更加丰富了，新增了许多的动态表盘，效果惊艳。整体传感器升级，信号更好。进入了健康环节。一直以健康系统为主打功能的 Apple Watch 今年又加入了更多的功能，自动检测人体跌落并主动发送求救信息，通过 FDA 审核等等。电池续航提升了！说可以支持一整天的电池续航。进入了一段视频来展示 watchOS 4。很周到的功能。还是觉得全面屏看起来很舒服。突然发现出现在视频和 PPT 的手表总是金色，土豪金吸人眼球？果然解释了一下，新增了金色的不锈钢。那就是金色不锈钢 iPhone 没跑了。确实花样有点多啊，各式各样的表盘。当然最后宣布的售价也是不菲的。现在还是只有中国联通支持 Apple 的 eSIM。Ok，手表环节结束。Cook上来，又来放视频。今年怎么这么多视频。Steve Theater 的屏幕不大。果然是直接进入了重头戏，iPhone 环节。双卡又双待，掌声响起来！咦？图片已经放出来大号的 iPhone 版本，一个小屁孩手中。“今天，很高兴跟大家宣布，我们又要将 iPhone 提升到一个更更更加厉害的高度！”，它就叫做，iPhone Xs！命名没跑啊。高管上台，开始介绍。金色不锈钢版本正式到来。“玻璃很坚固”。“防水半小时”。带来了 Super Retina，好高的像素啊，458 ppi！惊了。放在一起对比，比以前的 iPhone 8 Plus 还要大，这个显示屏也太好了，最大最好的显示屏。不过话说，怎么今年一上来就是报参数，全在说又什么硬件提升。Ok，大号的叫做 iPhone Xs Max，命名也没跑。这么大屏幕，用起来确实很身临其境啊。刚刚有说到，iPhone 支持点按唤醒了？怎么不知道以前有这个功能么。继续讲了一下 FaceID 的升级，更快更好，为什么呢？那当然是新推出的 A12 Bionic——这是业界第一款7nm芯片。严肃正经的高管开始了更加严肃正经的硬件介绍，性能提升，性能提升，神经网络提升。“这个性能也是无与伦比的”——五万亿运算次每秒，简直了。储存容量最大支持到了512G。现在发布会进行了50分钟，感觉重头戏 Max 已经被介绍完了啊，后面要说什么？上台了一位女高管。在不断介绍了A12 Bionic 的厉害之处。讲到了机器学习，确实这个在 iOS 12 里面还是有很多体现的，拼写预测，人脸识别，场景识别，AR 工具，Siri Shortcut等等。请到了三位开发者来到现场。]]></content>
      <categories>
        
          <category> Life </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Homebrew 马克]]></title>
      <url>/techstack/homebrew-mark</url>
      <content type="text"><![CDATA[有一个大胆的想法：所有东西都可以用brew来安装？–对，就是可以。0  基本使用：brew help 查看帮助。Example usage:  brew search [TEXT|/REGEX/]  brew info [FORMULA...]  brew install FORMULA...  brew update  brew upgrade [FORMULA...]  brew uninstall FORMULA...  brew list [FORMULA...]Troubleshooting:  brew config  brew doctor  brew install --verbose --debug FORMULAContributing:  brew create [URL [--no-fetch]]  brew edit [FORMULA...]Further help:  brew commands  brew help [COMMAND]  man brew官网1  相关了解1、关闭自动更新export HOMEBREW_NO_AUTO_UPDATE=true2、什么是 Homebrew？Homebrew 是 macOS 的套件管理工具，是高效下载软件的一种方法，相当于 Linux 下的 yum、apt-get 神器，用于下载存在依赖关系的软件包。3、Homebrew 与 Homebrew CaskHomebrew Cask 是 Homebrew 的扩展，简单理解是，brew 安装各种库，cask 安装各种应用程序。4、Homebrew 的好处通过 Homebrew 下载的软件都来自于官网，绝对放心软件的安全性。而且它尽可能地利用系统自带的各种库，使得软件包的编译时间大大缩短，基本上不会造成冗余。5、Homebrew 的安装/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”2  其他命令1、支持多个同时安装，用 空格 隔开。brew cask install 2、软件搜索命令 cask 源已经整合。brew search 3、更新所有包brew upgrade4、查看 Homebrew 下载的包存放路径brew –cache5、列出可更新的包brew outdated6、清理旧版本的包brew cleanupbrew cleanup -n7、彻底卸载某个包brew uninstall  --force8、锁定某个不想更新的包brew pin brew unpin $9、查看已安装包的依赖brew deps –installed –tree3  Updating Homebrew… 长时间不动解决方法卡在 updating homebrew… 不动，可以这样解决。替换 brew.git；替换 homebrew-core.git；更换 homebrew-bottles；简单的本地解决办法是增加：export HOMEBREW_NO_AUTO_UPDATE=true长期更换：echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' &gt;&gt; ~/.bash_profile;source ~/.bash_profile4  列表安装的时候注意有的是 cask，有的是 brew。github 客户端iina 视频播放器motrix 下载器karabiner-elements 改键MonitorControl 调节显示器亮度Typora 马克编辑器HandBrake 视频压缩gray 暗黑模式sourcetree Git 辅助工具5  Taps 增加其他源brew tap homebrew/aliasesaliases 指令替身homebrew-cask-drivers 驱动homebrew-cask-versions 老版本homebrew-cask-fonts 字体库]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[ACM 缩略词]]></title>
      <url>/contest/acm-mark</url>
      <content type="text"><![CDATA[记录一些 ACM 比赛中会出现的缩略词。直白点就是在提交 OJ 题时返回的输出。Received : The judge system has received your solution, usually you just need to wait a minute and your solution will be judged.Accepted (AC) : OK! Your program is correct!Presentation Error (PE) : Output Format Error. Your output format is not exactly the same as the judge’s output, although your answer to the problem is correct. Check your output for spaces, blank lines, etc. against the problem output specification.Wrong Answer (WA) : Correct solution not reached for the inputs. The inputs and outputs that we use to test the programs are not public. Some problems with special judge may not reply “Presentation Error”, replaced by “Wrong Answer”.Runtime Error (RE) : Your program failed during the execution (segmentation fault, floating point exception…). The exact cause is reported except Java.Time Limit Exceeded (TLE) : Your program tried to run with too much CPU time.Memory Limit Exceeded (MLE) : Your program tried to use more memory than the judge default settings. Output Limit Exceeded (OLE): Your program tried to write too much. This usually occurs if it goes into an infinite loop. The output limit is usually 256K, 512K, or 1M bytes.Compilation Error (CE) : The compiler (gcc/g++/gpc/fpc/javac) could not compile your program. Of course, warning messages are not error messages. Click the link at the judge reply to see the actual error message.Restricted Function (RF): Your program tried to call restricted functions. For example, maybe you have tried to open a file which is forbidden on OJ. It may also caused by Runtime Error (e.g. maybe a pointer point to wrong funtion), just consider it as Runtime Error in this situation.Internal Error (IE): The Judge system cause an internal error, please submit it later.]]></content>
      <categories>
        
          <category> Contest </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Terminal 马克]]></title>
      <url>/techstack/terminal-mark</url>
      <content type="text"><![CDATA[关于 macOS 自带终端的一些记录，对于一些系统变量的修改，简化动画特效。时间是 float 类型的时候谨慎修改。1  关闭窗口和对话框弹出的动画特效defaults write -g NSAutomaticWindowAnimationEnabled -bool FALSEdefaults delete -g NSAutomaticWindowAnimationEnabled# 注销并重新登录2  关闭quicklook的动画特效defaults write com.apple.finder QLPanelAnimationDuration -float 0.5;killall Finderdefaults delete com.apple.finder QLPanelAnimationDuration;killall Finder# 即刻生效3  关闭Mission Control的动画特效defaults write com.apple.dock expose-animation -duration -int 0;killall Dockdefaults delete com.apple.dock expose-animation -duration;killall Dock# 即刻生效4  关闭文件保存和打印对话框的动画效果defaults write -g NSWindowResizeTime -float 0.01defaults delete -g NSWindowResizeTime# 注销并重新登录5  关闭Launchpad界面动画效果defaults write com.apple.dock springboard-show-duration -int 0;defaults write com.apple.dock springboard-hide-duration -int 0;killall Dock# 即刻生效defaults delete com.apple.dock springboard-show-duration;defaults delete com.apple.dock springboard-hide-duration;killall Dock# 关闭滑动页面的效果defaults write com.apple.dock springboard-page-duration -int 0;killall Dock# 即刻生效defaults delete com.apple.dock springboard-page-duration;killall Dock6  关闭Dock栏的动画效果defaults write com.apple.dock autohide-time-moidifier -int 0;killall Dockdefaults write com.apple.dock autohide-time-moidifier -int 0;killall Dock# 即刻生效7  在 Launchpad 里放下更多图标（将会重排）defaults write com.apple.dock springboard-columns -int 14;defaults write com.apple.dock springboard-rows -int 9;defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock# 即刻生效# 13x8 MacBook Pro# 14x9 1080P 21.5]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[如何学习自然码辅码？]]></title>
      <url>/techstack/how-to-learn-auxiliary-code</url>
      <content type="text"><![CDATA[自然码是个比较古老的双拼方案了，有多古老？古老到现在不少用户都根本不知道它还有一套辅码方案。自然码的辅码称不上是形码，它之所以被称为是辅码，就是因为这套方案的设计初衷还是作为辅助，所以它并不能像小牛辅码那样做到非常低的重码率——但是加上音的话，用起来还是很高效。为什么就算如此还说它输入高效呢？因为它设计之初就是为了辅助，这就直接决定了这套方案十分容易被接受和学习！有多简单？就是偏旁部首的拼音声母嘛！比如说，你要输入“编”这个字，当你输入“bm”的时候，出现在候选栏第一位的却是“边”，这个时候该怎么办呢？使用自然码辅码，把“编”拆分为“纟”和“扁”，该怎么辅码？显然就是“s”，代表“丝”的发音，显然一旦理解后都不需要记忆。手心输入法的直接辅码使用的就是自然码辅码规则。光这样按照单字举例实在是太繁琐了，考虑到现在自然码收益不佳早已倒闭多年，你可能连一本完整的自然码使用说明书也找不到了，而网络上更是连一份完整的自然码码表也难以找到，这里我就简单来解释一下自然码的各中文字拆分原理。象形字所谓象形字其实也就是单字，它们大多会作为其他比较复杂的字的偏旁部首，考虑到自然码用偏旁部首来作为辅码，你自然不能给偏旁拆偏旁，这就会引起悖论了，所以自然码其实规定了三种基本笔画，不过你应该用不到他们，这个笔画很有早些年手机上的笔画输入法，你可能用过，也可能根本没有听说过。实际上，现在的 iPhone 上依旧留存这种输入法，这种输入法只有五个笔画“横竖撇点（捺）折”，优点是基本不会重码，缺点是不重码的前提是你输入的足够长……自然码的三大笔画则是  a 、 d 、 p。其中 a 代表了一切 横 、 竖 、 折（折就是笔画里的横折、竖折、横撇等）；其中 d 代表了一切 点 （也包括捺，你懂的）；其中 p 代表了一切 撇。你看，有了这个规则，我们对应一个简单字的时候，就输入它的起笔和停笔即可，按照这个规则，那么“马”的辅码就是“折横”也就是“aa”，“金”的辅码就是“撇横”就是“pa”。对于辅码，其实是分为单辅码和双辅码——无非就是为了更精确罢了，一般情况下你不需要使用两位辅码，因为很有可能第一位辅码字母就已经满足了你的需求。总之，这里我们的例子都是两位完整辅码，是为了方便你理解辅码的意义。形声字这类字最常见了，大部分的组词都是这样的字，它们由两部分组成，然后一部分表示声音，一部分表示意思，比如说 “想”，你看，你读它的时候发的是“相”的音，而理解的却是“心”的意思，对吧？对于这一类的字，它们的偏旁的声母就是辅码了。显然，“想”的部首是“心”，剩下的部分是“相”，那么“想”的辅码就是“xx”；再来个例子，“袋”的部首是“衣”，剩下部分是“代”，那么“袋”的辅码就是“yd”。会意字和转意字说白了，这些字和上文中的形声字一样，很容易能被拆分成两部分，但区别在于你可能并不能立即就判断出来哪个部分应该是这个字的偏旁——“思、杏、如”。你说它“田字头”也对，说它“心字底”也对——其实，这些字本来就是可以看作有两个偏旁的。所以说，这时候，拆偏旁的规则就有点郁闷了——总之，这里你不用纠结，按照直觉随便选一个就行，所以说，“思”就有两个辅码“tx”和“xt”——这都是被接受的。同样的“如”的辅码可以是“nk”，也可以是“kn”，“杏”的辅码是“mk”，也可以是“km”。非整体合成字这些字你往往一眼就能把它们拆成好几个部分，或者说，拆出来的部分并不是常用的小字，这就比较尴尬了——我根本不认识这个字，要怎么读出声母呢？对于这些字，我们用首尾笔画和小部件来辅码，比如“录”这个字，它一眼就能看出由“彐”和“水”组成，那么“彐”就不是大多数人都能读出来的了，我们则取它的起笔“横折”，也就是“a”，那么“录”的辅码就是“au”了。再比如“释”，它的偏旁不是“米”，另外半个也不知道是个啥，那么我们可以取“撇”和“丰”，它的辅码就是“pf”。“谧”则有三部分，那么取偏旁和另外两部分的末尾部分也就是那个“皿”，就是“ym”。部首隐蔽的字这一部分的字就是那些你一眼不太容易找到部首的字，那么你可以尝试字中明显的小部分，比如“鹰”是“gn”，但也可以是“n”；“颖”可以是“hy”，也可以是“yh”——“页”和“禾”在这里就不会区分的很详细避免你用起来会混淆——实际上就是混着来的，不怕你用错。偏旁部首的命名说完了字，我们来说说看部首到底怎么命名，因为不同的地方由于各种原因，对于偏旁部首的命名是不同的，所以自然码也只能取称呼比较广泛的一种来命名，但我相信你总能猜出其他的称呼，毕竟这些东西万变不离其宗的。日、月、曰、目 它们都是圆的，所以用 o 表示；扌这是“扶手旁”而非“提手旁”——实际上 t 也是可以的但会和“提土旁”重码；彳取“行人”的意思所以用 x 表示——实际上“双人旁”也是可以的但会和“水”重码；亠 叫“文字头”；灬 不称为“四点底”而取“火”的变体，所以是 h；实际的使用实际上，其实由于当年自然码直到倒闭也没有公开它的码表，所以如今我们使用的自然码码表都是后人依据自然码规则重新制作的。这就导致了对于辅码编码上的严格程度会根据码表作者的心情而不同。不过，在落格输入法中，我们还是遵循了“最大可能”，基本上就算重码，也会保证你第一时间能辅出这个码为准而不是减少重码。总之，由于自然码好学好用，所以多猜几次也不是什么难事——毕竟，一个字也就那么几种拆法，你又能和自然码的设计者差出多少去呢？]]></content>
      <categories>
        
          <category> TechStack </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[SAP 参观实习]]></title>
      <url>/life/sap-tour</url>
      <content type="text"><![CDATA[零零散散的大二暑假参观实习记录。位于浦东软件园的 SAP 公司。实习报告3000字和公司相关 这家公司干什么 简介自己的行程 感受 在老师的带领下专业认识和感悟长的很有意思的 Richard：他在讲什么鬼，感觉没有重点，主要讲 SAP 的简介，原来他是个主持人，SAP 结果就是个渗透到企业各个层面的软件开发商偏偏稳重一点的 Cheery：一直在介绍 VT Vocational Training招聘时间是在18年3月，目标是通过培训为公司找到合适的人才，项目开始于12年Open Positive Engaged Learn CollaborateGood talk Wrong receiver微胖、有秃头倾向的16届研究生徐磊：在闲聊，依然没有重点，有目标要趁早，知道自己想要什么，自律带来自由，什么玩意儿，珍惜时间开始参观了，云思想，坐电梯，办公室，会议室，“体育馆”，免费饮料角，还是很无聊，食堂，健身房，桌面台球，]]></content>
      <categories>
        
          <category> Life </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[WWDC17 随录]]></title>
      <url>/life/wwdc-17</url>
      <content type="text"><![CDATA[2017 年看 WWDC17 的随录，第一次熬夜看发布会！今年超级激动的！终于熬夜看 WWDC 了！开场一首 Coldplay 的摇滚慢慢带人进入 Apple 的独特音乐境地，接着是一段没有手机后的“灾难片”，哈哈，有趣！Tim Cook 随着一句“Goodg， morning!”登场，开始对场地的简介。“This is going to be the best and biggest WWDC ever!”Students! 10 years old! 82 years old! Amazing!刚想说背景为什么是白色，就换成黑色了。今晚要说的可多了！6份声明！6件大事儿！1、tvOS 蓬勃壮大——amazon 加入 Apple TV！2、Apple Watch——watchOS 4 发布啦！Siri 在系统中扮演了越来越重要的角色，新的表盘界面，信息整合，万花筒效果表盘，玩具总动员表盘系列，活动记录会变得越来越符合个人使用，强调了自动化信息整合，成就界面很炫酷，锻炼新增自动记录游泳距离、高抬腿锻炼、骑车等高强度体育练习，通过 NFC 接口控制跑步机等锻炼仪器，音乐方面提供播放列表、封面选取等新界面，新系统版本今日提供！3、Mac 迎来更新！——硬件方面？好吧还是直接软件方面了，macOS Sierra，perfecting it！于是成了 macOS High Sierra! 好像是在开玩笑、、、完善了多少功能啊，Safari 世界最快的浏览器降生，远超 Chrome，Autoplay blocking 功能加入，智能跟踪限制保护隐私，与邮件的衔接更为完美，并且提供分屏浏览，自动同步人像命名，照片修图与第三方软件的衔接，HFS 文件系统退役，APFS 文件正式进入 macOS，可以瞬间复制大型文件，视频编码功能更新，更快更节省空间的压缩机制，符合硬件加速，图像性能再次提升，于是迎来了 Metal 2，提供外接硬件设备支持，还有 Metal for VR！苹果也要介入 VR 行业了，对各大游戏厂商提供 VR 支持，今天就可以安装开发者预览版！iMac 又要更新了？看来是的，硬件来了，iMac 产品再次升级，提供超亮度与广色域，处理器提升，内存最高配升级，更大储存容量，图形性能提升看来是重点，图形处理速度显著提升，快达3倍！展示了 VR 性能，真的很高清！最高清的 VR 展示，直接展示星战影片，任意视角的那种，要哭了，未来看电影说不定可以自己选视角，iMac 21.5 inch 的价格又降低了，MacBook 也全线更新处理器，也降价了！配置更高，价格更低，勇敢的营销策略，是不是有新的硬件？果然！全黑的 iMac ！！！！！！要哭了，是叫 iMac Pro？说是有史以来 Apple 造出的最最最强大的 Mac！全系列里最强大的，18核处理器，那是个什么鬼，天，所以 Mac Pro 倍这个新的图形与性能怪兽取代了，128GB 的内存，4个雷电口，其实还是喜欢黑色的背光 Magic Keyboard 键盘和 黑色的 Magic Mouse，而这些的售价也出奇的高，$4999，最快11月份提供！4、iOS 终于来了！——史上最强大的 iOS 11 来了，iMessage 升级，现可以通过 iCloud 同步聊天记录，可以单独删除消息？说是占用的容量小了，Apple Pay 两人可以面对面付款了，并且可通过 iMessage 实现，Apple Pay Cash Card，Siri 再次迎来升级，拟声功能极为强大，听起来很顺耳，提供翻译功能，有望碾压 Google Transition，第三方接口更丰富，推测你想要的信息，相机采用新的压缩机制，占用容量仅为先前一半，Live Photo 支持更高级的剪辑，控制中心重磅更新！超级简洁！一言难尽，可以用 3D Touch 扩展窗口，支持超多种类的图片处理，用 Live Photo 做回忆电影，地图功能提升，支持楼层信息，驾驶勿扰模式，直接黑屏，简单粗暴，Home 支持 AirPlay 2 接口，同时操作多台音响设备，Apple Music 支持查看朋友收听，App Store 被重新设计的，完全看不出来是之前的样子，但是很精美，其他方面，iOS 11 同样拥有机械学习，Metal 技术，AR Kit，在摄像头里摆一杯咖啡！一盏台灯！如丝般顺滑，感动，在 AR 中玩游戏，想想就觉得神奇！5、新款 iPad Pro 来了！大屏窄边，精致强悍——10.5 inch，1 pound， 屏幕上的全键盘了，屏幕外的全键盘 Smart Keyboard，最高可达 120 Hz 屏显刷新率，每一帧都很流畅，Apple Pencil 延迟降至 20 ms，A10X 处理器，6核处理器，10小时续航，相机系统提升，$649，极其强大的硬件，iOS 11 为 iPad Pro 特制功能，Dock！！！！！拖拽应用以适用多窗口！！！！！Files！！！！！终于支持了原生的文件浏览器，多任务处理，全局拖拽文件，终于在 macOS 与 iOS 团队合并的第一年，迎来了 iOS for iPad 的强大升级！6、硬件！HomePod 家庭音乐终端——无与伦比的音质，前所未有的智能，还有一颗 A8 小心脏，智能识别周围环境，依据地形发出最合适的音质，多台设备可同时协作，支持 Hey, Siri，黑白两色，家庭小能手！And 前第一夫人要来参加 Apple 音乐节！]]></content>
      <categories>
        
          <category> Life </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
